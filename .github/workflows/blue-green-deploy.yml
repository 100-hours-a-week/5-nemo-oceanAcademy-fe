name: BlueGreen CICD Pipeline

on:
  push:
    branches:
      - feature/deploy

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v1

      - name: Docker Hub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: .env 파일 생성
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Docker 이미지 빌드 및 Docker Hub에 푸시
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: judykimsohui/nemo-fe:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
  
    steps:
      - name: SSH를 위한 디렉토리 및 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: 기존 컨테이너 중지 및 삭제
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop nemo-fe-green || true
            docker rm nemo-fe-green || true

      - name: 현재 실행 중이지 않는 서비스에 새로운 Docker 컨테이너 배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # IMDSv2 토큰 요청
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

            # 현재 리스너에 연결된 타겟 그룹 ARN 가져오기
            CURRENT_TARGET_GROUP_ARN=$(aws elbv2 describe-listeners --listener-arn ${{ secrets.LISTENER_ARN }} --query "Listeners[0].DefaultActions[0].TargetGroupArn" --output text)

            # 로그에 현재 타겟 그룹 ARN 출력
            echo "Current Target Group ARN: $CURRENT_TARGET_GROUP_ARN"

            # 타겟 그룹 ARN에 따라 현재 포트 결정
            if [ "$CURRENT_TARGET_GROUP_ARN" == "${{ secrets.BLUE_TARGET_GROUP_ARN }}" ]; then
              CURRENT_PORT=3000
              NEW_PORT=3001
              TARGET_GROUP_ARN=${{ secrets.GREEN_TARGET_GROUP_ARN }}
            else
              CURRENT_PORT=3001
              NEW_PORT=3000
              TARGET_GROUP_ARN=${{ secrets.BLUE_TARGET_GROUP_ARN }}
            fi

            # 로그에 현재 포트 및 새 포트 정보 출력
            echo "Current port in use: $CURRENT_PORT"
            echo "New port to be used: $NEW_PORT"

            # 환경 변수로 CURRENT_PORT 및 NEW_PORT 설정
            echo "CURRENT_PORT=$CURRENT_PORT" > /tmp/deployment_ports.env
            echo "NEW_PORT=$NEW_PORT" >> /tmp/deployment_ports.env

            # /app/config 디렉토리 생성 및 권한 설정
            if [ ! -d "/app/config" ]; then
              sudo mkdir -p /app/config
            fi
            sudo chown -R $USER:$USER /app/config

            # .env 파일 생성
            echo "${{ secrets.ENV_FILE }}" | sudo tee /app/config/.env

            # Docker 이미지 최신 버전 가져오기
            docker pull judykimsohui/nemo-fe:latest

            # 새로운 포트로 새로운 Docker 컨테이너 실행
            docker run -d --name nemo-fe-green -p $NEW_PORT:$NEW_PORT \
            --env-file /app/config/.env \
            -e PORT=$NEW_PORT \
            judykimsohui/nemo-fe:latest

      - name: PORT 정보를 GITHUB로 Fetch
        run: |
          scp -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/deployment_ports.env .
          source deployment_ports.env
          echo "CURRENT_PORT=$CURRENT_PORT" >> $GITHUB_ENV
          echo "NEW_PORT=$NEW_PORT" >> $GITHUB_ENV
  
      - name: 새 배포 환경의 Health Check
        run: |
          set +e
          echo "Starting Health Check on ${{ secrets.SERVER_HOST }}:${{ env.NEW_PORT }}"
          echo "Current port: ${{ env.CURRENT_PORT }}, New port: ${{ env.NEW_PORT }}"
          for i in {1..20}; do
            # 첫 번째 헬스 체크 시도
            response=$(curl -s --max-time 10 http://{{ secrets.SERVER_HOST }}:${{ env.NEW_PORT }})
            echo "Health Check attempt $i: Response was '$response'"
            
            # 응답을 확인하여 "status\":\"ok"가 포함되어 있는지 검사
            if [[ "$response" == *"status\":\"ok\""* ]]; then
              echo "Health Check passed!"
              exit 0
            else
              echo "Health Check attempt $i failed. Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          echo "Health Check failed after 5 attempts."
          exit 1
  
      - name: ELB 리스너를 새 타겟 그룹으로 업데이트
        run: |
          aws elbv2 modify-listener --listener-arn ${{ secrets.LISTENER_ARN }} --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN
  
      - name: 이전 타겟 그룹에서 인스턴스 deregister
        run: |
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          if [ "${{ env.CURRENT_PORT }}" -eq "3000" ]; then
            OLD_TARGET_GROUP_ARN=${{ secrets.BLUE_TARGET_GROUP_ARN }}
          else
            OLD_TARGET_GROUP_ARN=${{ secrets.GREEN_TARGET_GROUP_ARN }}
          fi
          aws elbv2 deregister-targets --target-group-arn $OLD_TARGET_GROUP_ARN --targets Id=$INSTANCE_ID
  
      - name: 이전 버전의 환경을 멈추고 삭제
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop nemo-fe || true
            docker rm nemo-fe || true
            
            # 다음 사이클을 위해, nemo-fe-green을 nemo-fe로 이름 변경
            docker rename nemo-fe-green nemo-fe || true
